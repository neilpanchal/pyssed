pyssed:
=======
A library for generating CSS via pure Python.


Author:
=======
Steve Lacy (slacy@slacy.com)

Description:
============
This is a simple library for expressing CSS selectors & rules in Python, and
generating a syntactically correct CSS file as output.


Background:
===========
When doing web development, the developer must work in several languages and
syntaxes concurently.  Typically, you will have 4 or more languages to work with:

- Python (or whatever language you're using for your backend)
- HTML
- CSS
- JavaScript

Often times, context switching between languages can lead to simple editing
mistakes, like missing (or adding) semicolons at the end of lines, etc.

In addition, CSS is a very lightweight syntax, missing many key features.  Because of this, several CSS helper libraries have arisen.  For example:

Less CSS: "Leaner CSS" http://lesscss.org/
Sass: "Style with attitude" http://sass-lang.com/
Clever CSS: "the pythonic way of webdesign" http://sandbox.pocoo.org/clevercss/

But, none of these helper libraries actually use native Python for
generating the CSS itself.

And thus, I have created pyssed.

Examples:
=========

# A trivial example of pyssed
# See actual source in examples/simple.py

import pyssed

css = {
    'a:hover': {
        'font-weight': 'bold',
    }
}

print '\n'.join(pyssed.generate(css))

will generate the CSS:

"""
a:hover {
  font-weight: bold;
}
"""

In addition, because it's pure Python, pyssed's syntax is as flexible as the
language itself, and inherently supports most of the features of the
previously mentioned CSS helpers. Here's an example showing off lots of
pyssed's features, include variables, mixins, nested styles, and style
reuse.

# See source in examples/everything.py
import pyssed

site_background = "#123450"
red = pyssed.style('color: red;')
blue = pyssed.style(color='blue')
green = {'color': 'green'}
bold = pyssed.style('font-weight: bold;')
red_bold = red + bold


def rounded(radius):
    return pyssed.style({
        'border-radius': radius,
        '-moz-border-radius': int(round(radius * 1.5)),
        '-webkit-border-radius': int(round(radius * 2.0)),
        })

css = {
    '.blue': blue,
    '.green': green,
    'ul li': rounded(3) + blue + {
        'font-style': 'italic',
        'background': site_background,
    },
    'div.ground': rounded(7) + red_bold + {
        'p': {
            'text-align': 'left',
            'em': {
                'font-size': '14pt',
                'background': site_background,
            }
        },
    }
}

print '\n'.join(pyssed.generate(css))

Which will generate the following CSS (item ordering may vary):

"""
.green {
    color: green;
}

div.ground {
    border-radius: 7px;
    color: red;
    font-weight: bold;
    -webkit-border-radius: 14px;
    -moz-border-radius: 11px;
}

div.ground p {
    text-align: left;
}

div.ground p em {
    font-size: 14pt;
    background: #123450;
}

.blue {
    color: blue;
}

ul li {
    border-radius: 3px;
    background: #123450;
    color: blue;
    -webkit-border-radius: 6px;
    -moz-border-radius: 5px;
    font-style: italic;
}
"""